Inspired by Django templating and Jinja2

FOR SURE:
- Documentation
- More tests (especially test blocks re-using, that cacheing works properly)
- Error exceptions
- Recursion protection on inheritance
- Recursion protection on inclusion
- Recursion protection on deep comparision
- Implement cache control options for Template constructor
- as_string method for variables and operations, useful for good error messaging
- Performance testing in comparision of other perl implementations and Django itself
- DTL::Fast::Utils::html_protect should work using XS module (to take from CDI3)
- Make compatible comparisions to None, True, False and undef (new)
- Implement Django filter plugins from: https://docs.djangoproject.com/en/1.7/ref/templates/builtins/#built-in-filter-reference
- Implement Django tag plugins from: https://docs.djangoproject.com/en/1.7/ref/templates/builtins/#built-in-tag-reference
- Profiling and optimising using NYTProf
- Performance testing for old and new context variables work

NEED IDEA:
- load tag can load any module, it's not secure. What can we do?
- Compare two undefs. What should we do?
- Macroses in jinja. What for? What is the difference from include?
- Shouldn't context be pushed on top-level template, to preserve original context?
- debug tag currently just dumping context. What else? check with Django. Supposedly there should be a template tree
- csrf_token tag, what to do with it?
- Control of closing tags and die or warn. 
- Do something about spaces around tags and placeholders. 
- What to do on not existed context variable. 
- Deep comparision option to enable/disable multi-level comparision in Operators.
